# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

stages:

- stage: build

  jobs:

  - job: build

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DockerCompose@0
      displayName: docker-compose build
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'

  - job: test

    pool:
      vmImage: ubuntu-latest

    variables:
      sdkVersion: 3.1.x
      solutionPath: TheGuardianAPI
      buildConfiguration: Release

    steps:

    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: 2.1.x
      displayName: dotnet 2.1.x
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'TheGuardian'
        organization: '2002-feb24-net'
        scannerMode: 'MSBuild'
        projectKey: 'theguardian'
    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(sdkVersion)
      displayName: dotnet $(sdkVersion)

    - script: dotnet build
        --configuration $(buildConfiguration)
      workingDirectory: $(solutionPath)
      displayName: dotnet build

    # - script: dotnet test
    #     --configuration $(buildConfiguration)
    #     --logger trx
    #     --no-build
    #     --results-directory $(Common.TestResultsDirectory)
    #     --settings coverlet.runsettings
    #   workingDirectory: $(solutionPath)
    #   continueOnError: true
    #   displayName: dotnet test

    - task: SonarCloudAnalyze@1
      displayName: sonarcloud analysis run

    # - task: PublishTestResults@2
    #   condition: succeededOrFailed()
    #   inputs:
    #     testRunner: VSTest
    #     testResultsFiles: $(Common.TestResultsDirectory)/*.trx
    #   displayName: test results build publish

    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(Common.TestResultsDirectory)/*/coverage.cobertura.xml
      displayName: code coverage build publish

    - task: SonarCloudPublish@1
      condition: succeededOrFailed()
      displayName: sonarcloud results build publish


- stage: deploy
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  dependsOn: build

  jobs:

  - job: push

    pool:
      vmImage: ubuntu-latest

    steps:

    - task: DockerCompose@0
      displayName: docker-compose build
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Build services'

    - task: DockerCompose@0
      displayName: docker-compose push
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'dockerhub-anvelez26'
        dockerComposeFile: 'docker-compose.prod.yml'
        action: 'Push services'

    - task: PublishPipelineArtifact@1
      displayName: k8s manifest publish
      inputs:
        targetPath: 'k8s'
        artifact: 'k8s'
        publishLocation: 'pipeline'

  - deployment: deploy_dev
    dependsOn: push

    pool:
      vmImage: ubuntu-latest

    environment: dev

    strategy:
      runOnce:
        deploy:
          steps:

          - task: KubernetesManifest@0
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'dev-default-1588997449589'
              namespace: 'default'
              manifests: '$(Pipeline.Workspace)/k8s/**/*.yml'

          - task: Kubernetes@1
            displayName: kubectl rollout restart
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'dev-default-1588997449589'
              namespace: 'default'
              command: 'rollout'
              useConfigurationFile: true
              configuration: '$(Pipeline.Workspace)/k8s/deployment'
              arguments: 'restart'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

