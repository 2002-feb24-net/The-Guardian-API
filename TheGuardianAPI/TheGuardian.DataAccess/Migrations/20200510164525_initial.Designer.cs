// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TheGuardian.DataAccess;

namespace TheGuardian.DataAccess.Migrations
{
    [DbContext(typeof(GuardianContext))]
    [Migration("20200510164525_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TheGuardian.DataAccess.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<double>("AggClericalStaffRating")
                        .HasColumnType("double precision");

                    b.Property<double>("AggFacilityRating")
                        .HasColumnType("double precision");

                    b.Property<double>("AggMedicalStaffRating")
                        .HasColumnType("double precision");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Zip")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "621 North Hall Street",
                            AggClericalStaffRating = 0.0,
                            AggFacilityRating = 0.0,
                            AggMedicalStaffRating = 0.0,
                            City = "Dallas",
                            Name = "Baylor Scott & White Heart and Vascular Hospital",
                            Phone = "(214) 820-0600",
                            State = "TX",
                            Website = "http://www.baylorhearthospital.com/handler.cfm?event=practice,main",
                            Zip = 75226
                        });
                });

            modelBuilder.Entity("TheGuardian.DataAccess.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClericalStaffRating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateAdmittance")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("DateSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("FacilityRating")
                        .HasColumnType("integer");

                    b.Property<int>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicalStaffRating")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("ReasonOther")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WrittenFeedback")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TheGuardian.DataAccess.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("AccountDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("AccountVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(35)")
                        .HasMaxLength(35);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<int>("Zip")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessLevel = true,
                            AccountDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AccountVerified = true,
                            Address = "1001 S Center St",
                            City = "Arlington",
                            Email = "superadmin@gmail.com",
                            FirstName = "Super",
                            LastName = "Admin",
                            Password = "R3vTra1n1ng",
                            State = "TX",
                            Zip = 76010
                        });
                });

            modelBuilder.Entity("TheGuardian.DataAccess.Review", b =>
                {
                    b.HasOne("TheGuardian.DataAccess.Hospital", "Hospital")
                        .WithMany("Reviews")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGuardian.DataAccess.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
